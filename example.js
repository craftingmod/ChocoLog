"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const canvas_1 = require("canvas");
const emoji_unicode_1 = __importDefault(require("emoji-unicode"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const image_size_1 = __importDefault(require("image-size"));
const minda_ts_1 = require("minda-ts");
const node_fetch_1 = __importDefault(require("node-fetch"));
const sharp_1 = __importDefault(require("sharp"));
const snowconfig_1 = require("../snow/config/snowconfig");
async function renderBoard(board, pallate = {}, sideinfo = {}) {
    // load font
    const ttf = `${snowconfig_1.debugPath}/res/NanumSquareRoundR.ttf`;
    canvas_1.registerFont(ttf, { family: "NanumSquareRound" });
    // define size
    const hexagonSize = 1500;
    const frameWidth = Math.floor(hexagonSize * 1.2211);
    const circleFR = Math.floor(frameWidth * 1.1);
    const canvas = canvas_1.createCanvas(circleFR, circleFR, "PDF");
    // load frame
    const frameBuffer = await fs_extra_1.default.readFile(`${snowconfig_1.debugPath}/res/board.png`);
    const frameSizeI = image_size_1.default(frameBuffer);
    const scaledFrameH = Math.floor(frameSizeI.height / frameSizeI.width * frameWidth);
    const frame = await sharp_1.default(frameBuffer)
        .resize(frameWidth, scaledFrameH, { fit: "inside" })
        .toBuffer().then(loadImage);
    const ctx = canvas.getContext("2d");
    // draw circle
    ctx.beginPath();
    const r = circleFR / 2;
    ctx.arc(r, r, r, 0, 2 * Math.PI, false);
    ctx.fillStyle = "#f9edca";
    ctx.fill();
    // draw frame
    ctx.drawImage(frame, (circleFR - frameWidth) / 2, (circleFR - scaledFrameH) / 2);
    await drawHexagon(ctx, [Math.floor(circleFR / 2), Math.floor(circleFR / 2)], hexagonSize, "#2c2c2a", {
        board,
        blackImage: pallate.black,
        whiteImage: pallate.white,
        noStoneImage: pallate.default,
    });
    // draw userinfo
    const infoSize = Math.floor(hexagonSize / 8);
    const defaultPic = await fs_extra_1.default.readFile(`${snowconfig_1.debugPath}/res/placeHolderProfileImage.png`);
    // copy
    if (sideinfo.black != null) {
        if (sideinfo.black.image == null) {
            sideinfo.black.image = defaultPic;
        }
        await drawPicture(ctx, "left", {
            at: [(circleFR - infoSize * 3) / 2, 0],
            size: infoSize,
            backColor: "#222222",
            textColor: "#eeeeee",
            stone: sideinfo.black.stone,
            maxStone: sideinfo.maxstone,
        }, sideinfo.black.image, sideinfo.black.username);
    }
    // paste
    if (sideinfo.white != null) {
        if (sideinfo.white.image == null) {
            sideinfo.white.image = defaultPic;
        }
        await drawPicture(ctx, "right", {
            at: [(circleFR - infoSize * 3) / 2, circleFR - infoSize],
            size: infoSize,
            backColor: "#eeeeee",
            textColor: "#222222",
            stone: sideinfo.white.stone,
            maxStone: sideinfo.maxstone,
        }, sideinfo.white.image, sideinfo.white.username);
    }
    const buffer = canvas.toBuffer();
    return buffer;
}
exports.renderBoard = renderBoard;
/**
 * Draw hexagon
 * @param ctx Context
 * @param centerPoint Center point of hexagon
 * @param hexaLength Hexagon's longest width
 * @param bgColor Background color
 * @param params Original parameters
 */
async function drawHexagon(ctx, centerPoint, hexaLength, bgColor, params) {
    // 0. config (0 < x <= 1/2)
    const elSize = 2 / 5;
    const { board, blackImage, whiteImage, noStoneImage } = params;
    /* first: parse color */
    const parseColor = (str, fault) => {
        if (str != null && str.startsWith("#") && /^#[0-9A-Fa-f]{6}$/ig.test(str)) {
            return str.toUpperCase();
        }
        else {
            return fault.toUpperCase();
        }
    };
    const colors = {
        black: parseColor(blackImage, "#eeeeee"),
        white: parseColor(whiteImage, "#111111"),
        default: parseColor(noStoneImage, "#ffefbc"),
    };
    /* and draw background */
    if (bgColor != null) {
        ctx.fillStyle = bgColor;
        ctx.beginPath();
        const [cx, cy] = centerPoint;
        ctx.moveTo(Math.floor(cx - hexaLength / 2), cy);
        ctx.lineTo(Math.floor(cx - hexaLength / 4), Math.floor(cy - Math.sqrt(3) * hexaLength / 4));
        ctx.lineTo(Math.floor(cx + hexaLength / 4), Math.floor(cy - Math.sqrt(3) * hexaLength / 4));
        ctx.lineTo(Math.floor(cx + hexaLength / 2), cy);
        ctx.lineTo(Math.floor(cx + hexaLength / 4), Math.floor(cy + Math.sqrt(3) * hexaLength / 4));
        ctx.lineTo(Math.floor(cx - hexaLength / 4), Math.floor(cy + Math.sqrt(3) * hexaLength / 4));
        ctx.lineTo(Math.floor(cx - hexaLength / 2), cy);
        ctx.closePath();
        ctx.fill();
    }
    /* second: define constans */
    hexaLength = Math.floor(hexaLength * board.sqaureSize / (board.sqaureSize + Math.sqrt(2) - 1));
    // 1 * l / (2n)
    const oneX = hexaLength / (2 * board.sqaureSize);
    // 3^(1/2)l / (2n)
    const oneY = Math.sqrt(3) * hexaLength / (2 * board.sqaureSize);
    // stone/image width (not radios but width)
    const elementWidth = 2 * hexaLength * elSize / board.sqaureSize;
    /* third: draw */
    // load image
    const getImage = async (url) => {
        if (url == null || !url.startsWith("http")) {
            return null;
        }
        let binary = await node_fetch_1.default(url).then((v) => v.buffer());
        const roundedCorners = Buffer.from(`<svg><rect x="0" y="0" width="${elementWidth}" height="${elementWidth}" rx="${elementWidth}" ry="${elementWidth}"/></svg>`
            // `<svg><circle cx="${elementWidth / 2} cy="${elementWidth / 2}" r="${elementWidth / 2}"/></svg>`
        );
        binary = await sharp_1.default(binary)
            .resize(Math.ceil(elementWidth))
            .overlayWith(roundedCorners, { cutout: true })
            .toBuffer();
        return new Promise((res, rej) => {
            const img = new canvas_1.Image();
            img.onload = () => res(img);
            img.onerror = (err) => { res(null); };
            img.src = binary;
        });
    };
    const images = {
        black: await getImage(blackImage),
        white: await getImage(whiteImage),
        default: await getImage(noStoneImage),
    };
    /**
     * Get XY, draw image or circle to position.
     */
    const grid = board.decodedGrid;
    for (let row = 0; row < grid.length; row += 1) {
        for (let column = 0; column < grid[row].length; column += 1) {
            const stone = grid[row][column];
            const x = Math.floor(centerPoint[0] +
                (Math.abs(board.centerPosition - row) + 2 * (column - board.centerPosition)) * oneX);
            const y = Math.floor(centerPoint[1] + (row - board.centerPosition) * oneY);
            const drawCircle = (fillColor, r) => {
                ctx.beginPath();
                ctx.arc(x, y, r, 0, 2 * Math.PI, false);
                ctx.fillStyle = fillColor;
                ctx.fill();
            };
            const drawImage = (fillImage, cornerColor, r) => {
                ctx.drawImage(fillImage, Math.floor(x - r), Math.floor(y - r), Math.round(r * 2), Math.round(r * 2));
                ctx.beginPath();
                ctx.arc(x, y, r, 0, 2 * Math.PI, false);
                ctx.strokeStyle = cornerColor;
                ctx.lineWidth = Math.min(3, Math.floor(r / 20));
                ctx.stroke();
            };
            const draw = (fillImage, fillColor, smallsize) => {
                let r = elementWidth / 2;
                if (smallsize) {
                    r *= 0.7;
                    r = Math.round(r);
                }
                if (fillImage != null) {
                    drawImage(fillImage, "#333333", r);
                }
                else {
                    drawCircle(fillColor, r);
                }
            };
            switch (stone) {
                case minda_ts_1.StoneType.black:
                    {
                        draw(images.black, colors.black, false);
                    }
                    break;
                case minda_ts_1.StoneType.white:
                    {
                        draw(images.white, colors.white, false);
                    }
                    break;
                case minda_ts_1.StoneType.void:
                    {
                        draw(images.default, colors.default, true);
                    }
                    break;
            }
        }
    }
}
async function drawPicture(ctx, align, params, image, username) {
    const alignLeft = align === "left";
    const { at, size, backColor, textColor } = params;
    let [x, y] = at;
    x = Math.floor(x);
    y = Math.floor(y);
    const tagWidth = Math.floor(size * 3);
    const tagHeight = Math.floor(size);
    const padding = Math.floor(size * 0.1);
    const pos = [x, y];
    // background
    ctx.fillStyle = backColor;
    ctx.fillRect(x, y, tagWidth, tagHeight);
    const padPicSize = tagHeight - 2 * padding;
    // move poistion
    if (alignLeft) {
        pos[0] += padding;
        pos[1] += padding;
    }
    else {
        pos[0] += tagWidth - padding - padPicSize;
        pos[1] += padding;
    }
    // image
    const picture = await sharp_1.default(image)
        .resize(padPicSize, padPicSize, { fit: "contain", position: "center", background: { r: 0, g: 0, b: 0, alpha: 0 } })
        .toBuffer().then(loadImage);
    ctx.drawImage(picture, pos[0], pos[1]);
    // image stroke
    ctx.strokeStyle = textColor;
    ctx.lineWidth = 3;
    ctx.fillStyle = "#111111";
    ctx.strokeRect(pos[0], pos[1], padPicSize, padPicSize);
    // ctx.fillRect(x + padPicture, y + padPicture, padPicSize, padPicSize)
    // move position
    const textWidth = Math.floor(tagWidth - (padPicSize + padding * 3));
    const fontSize = Math.floor((tagHeight - 3 * padding) / 2);
    if (alignLeft) {
        pos[0] += padding + padPicSize;
    }
    else {
        pos[0] -= padding;
    }
    pos[1] += fontSize;
    if (!alignLeft) {
        ctx.textAlign = "right";
    }
    // nickname
    ctx.fillStyle = textColor;
    ctx.font = `${fontSize}px NanumSquareRound`;
    ctx.fillText(username, pos[0], pos[1], Math.floor(tagWidth - (padPicSize + padding * 3)));
    // thinking
    pos[1] = y + tagHeight - 2 * padding;
    const getNum = (num) => {
        if (num == null || num < 0) {
            return "?";
        }
        else {
            return num.toString();
        }
    };
    ctx.fillText(`\u{25EF} ${getNum(params.stone)}/${getNum(params.maxStone)}`, pos[0], pos[1], Math.floor(tagWidth - (padPicSize + padding * 3)));
    return [tagWidth, tagHeight];
}
function loadImage(url) {
    return new Promise((res, rej) => {
        const img = new canvas_1.Image();
        img.onload = () => res(img);
        img.onerror = (err) => {
            console.log(err);
            res(null);
        };
        img.src = url;
    });
}
function emojiAsSVG(emoji) {
    return `https://cdnjs.cloudflare.com/ajax/libs/twemoji/11.2.0/2/svg/${emoji_unicode_1.default(emoji).toLowerCase()}.svg`;
}
exports.emojiAsSVG = emojiAsSVG;
function getFillString(str, length) {
    let s = "";
    for (let i = 0; i < length; i += 1) {
        s += str;
    }
    return s;
}
//# sourceMappingURL=data:application/json;base64,